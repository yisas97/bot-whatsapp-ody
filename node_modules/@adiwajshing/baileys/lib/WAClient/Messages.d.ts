/// <reference types="node" />
import WhatsAppWebBase from './Base';
import { MessageOptions, MessageType, WALocationMessage, WAContactMessage, WASendMessageResponse, WAMessageKey } from './Constants';
import { WAMessageContent } from '../WAConnection/Constants';
import { proto } from '../../WAMessage/WAMessage';
export default class WhatsAppWebMessages extends WhatsAppWebBase {
    /**
     * Send a read receipt to the given ID for a certain message
     * @param {string} jid the ID of the person/group whose message you want to mark read
     * @param {string} messageID the message ID
     */
    sendReadReceipt(jid: string, messageID: string): Promise<any>;
    /**
     * Search WhatsApp messages with a given text string
     * @param txt the search string
     * @param count number of results to return
     * @param page page number of results
     */
    searchMessages(txt: string, count: number, page: number): Promise<{
        last: boolean;
        messages: proto.WebMessageInfo[];
    }>;
    /**
     * Mark a given chat as unread
     * @param jid
     */
    markChatUnread(jid: string): Promise<{
        status: number;
    }>;
    /**
     * Delete a message in a chat
     * @param id the person or group where you're trying to delete the message
     * @param messageKey key of the message you want to delete
     */
    deleteMessage(id: string, messageKey: WAMessageKey): Promise<WASendMessageResponse>;
    sendMessage(id: string, message: string | WALocationMessage | WAContactMessage | Buffer, type: MessageType, options?: MessageOptions): Promise<WASendMessageResponse>;
    /** Prepare a media message for sending */
    protected prepareMediaMessage(buffer: Buffer, mediaType: MessageType, options?: MessageOptions): Promise<{}>;
    /** Generic send message function */
    sendGenericMessage(id: string, message: WAMessageContent, options: MessageOptions): Promise<WASendMessageResponse>;
}
