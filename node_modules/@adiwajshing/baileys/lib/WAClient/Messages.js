"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Base_1 = __importDefault(require("./Base"));
var node_fetch_1 = __importDefault(require("node-fetch"));
var Constants_1 = require("./Constants");
var Utils_1 = require("../WAConnection/Utils");
var Constants_2 = require("../WAConnection/Constants");
var Utils_2 = require("./Utils");
var WAMessage_1 = require("../../WAMessage/WAMessage");
var WhatsAppWebMessages = /** @class */ (function (_super) {
    __extends(WhatsAppWebMessages, _super);
    function WhatsAppWebMessages() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Send a read receipt to the given ID for a certain message
     * @param {string} jid the ID of the person/group whose message you want to mark read
     * @param {string} messageID the message ID
     */
    WhatsAppWebMessages.prototype.sendReadReceipt = function (jid, messageID) {
        var json = [
            'action',
            { epoch: this.msgCount.toString(), type: 'set' },
            [['read', { count: '1', index: messageID, jid: jid, owner: 'false' }, null]],
        ];
        return this.queryExpecting200(json, [Constants_2.WAMetric.group, Constants_2.WAFlag.ignore]); // encrypt and send  off
    };
    /**
     * Search WhatsApp messages with a given text string
     * @param txt the search string
     * @param count number of results to return
     * @param page page number of results
     */
    WhatsAppWebMessages.prototype.searchMessages = function (txt, count, page) {
        return __awaiter(this, void 0, void 0, function () {
            var json, response, messages;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        json = [
                            'query',
                            {
                                epoch: this.msgCount.toString(),
                                type: 'search',
                                search: txt,
                                count: count.toString(),
                                page: page.toString()
                            },
                            null,
                        ];
                        return [4 /*yield*/, this.queryExpecting200(json, [Constants_2.WAMetric.group, Constants_2.WAFlag.ignore])]; // encrypt and send  off
                    case 1:
                        response = _a.sent() // encrypt and send  off
                        ;
                        messages = response[2] ? response[2].map(function (row) { return row[2]; }) : [];
                        return [2 /*return*/, { last: response[1]['last'] === 'true', messages: messages }];
                }
            });
        });
    };
    /**
     * Mark a given chat as unread
     * @param jid
     */
    WhatsAppWebMessages.prototype.markChatUnread = function (jid) {
        return __awaiter(this, void 0, void 0, function () {
            var json;
            return __generator(this, function (_a) {
                json = [
                    'action',
                    { epoch: this.msgCount.toString(), type: 'set' },
                    [['read', { jid: jid, type: 'false', count: '1' }, null]]
                ];
                return [2 /*return*/, this.queryExpecting200(json, [Constants_2.WAMetric.group, Constants_2.WAFlag.ignore])];
            });
        });
    };
    /**
     * Delete a message in a chat
     * @param id the person or group where you're trying to delete the message
     * @param messageKey key of the message you want to delete
     */
    WhatsAppWebMessages.prototype.deleteMessage = function (id, messageKey) {
        return __awaiter(this, void 0, void 0, function () {
            var json;
            return __generator(this, function (_a) {
                json = {
                    protocolMessage: {
                        key: messageKey,
                        type: WAMessage_1.proto.ProtocolMessage.PROTOCOL_MESSAGE_TYPE.REVOKE
                    }
                };
                return [2 /*return*/, this.sendGenericMessage(id, json, {})];
            });
        });
    };
    WhatsAppWebMessages.prototype.sendMessage = function (id, message, type, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var m, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (options.validateID === true || !('validateID' in options)) {
                            Utils_2.validateJIDForSending(id);
                        }
                        m = {};
                        _a = type;
                        switch (_a) {
                            case Constants_1.MessageType.text: return [3 /*break*/, 1];
                            case Constants_1.MessageType.extendedText: return [3 /*break*/, 1];
                            case Constants_1.MessageType.location: return [3 /*break*/, 2];
                            case Constants_1.MessageType.liveLocation: return [3 /*break*/, 2];
                            case Constants_1.MessageType.contact: return [3 /*break*/, 3];
                        }
                        return [3 /*break*/, 4];
                    case 1:
                        if (typeof message !== 'string') {
                            throw 'expected message to be a string';
                        }
                        m.extendedTextMessage = { text: message };
                        return [3 /*break*/, 6];
                    case 2:
                        m.locationMessage = message;
                        return [3 /*break*/, 6];
                    case 3:
                        m.contactMessage = message;
                        return [3 /*break*/, 6];
                    case 4: return [4 /*yield*/, this.prepareMediaMessage(message, type, options)];
                    case 5:
                        m = _b.sent();
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/, this.sendGenericMessage(id, m, options)];
                }
            });
        });
    };
    /** Prepare a media message for sending */
    WhatsAppWebMessages.prototype.prepareMediaMessage = function (buffer, mediaType, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var isGIF, mediaKey, mediaKeys, enc, mac, body, fileSha256, fileEncSha256B64, json, auth, hostname, urlFetch, responseJSON, message;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (mediaType === Constants_1.MessageType.document && !options.mimetype) {
                            throw 'mimetype required to send a document';
                        }
                        if (mediaType === Constants_1.MessageType.sticker && options.caption) {
                            throw 'cannot send a caption with a sticker';
                        }
                        if (!options.mimetype) {
                            options.mimetype = Constants_1.MimetypeMap[mediaType];
                        }
                        isGIF = false;
                        if (options.mimetype === Constants_1.Mimetype.gif) {
                            isGIF = true;
                            options.mimetype = Constants_1.MimetypeMap[Constants_1.MessageType.video];
                        }
                        mediaKey = Utils_1.randomBytes(32);
                        mediaKeys = Utils_2.getMediaKeys(mediaKey, mediaType);
                        enc = Utils_1.aesEncrypWithIV(buffer, mediaKeys.cipherKey, mediaKeys.iv);
                        mac = Utils_1.hmacSign(Buffer.concat([mediaKeys.iv, enc]), mediaKeys.macKey).slice(0, 10);
                        body = Buffer.concat([enc, mac]) // body is enc + mac
                        ;
                        fileSha256 = Utils_1.sha256(buffer);
                        fileEncSha256B64 = Utils_1.sha256(body)
                            .toString('base64')
                            .replace(/\+/g, '-')
                            .replace(/\//g, '_')
                            .replace(/\=+$/, '');
                        return [4 /*yield*/, Utils_2.generateThumbnail(buffer, mediaType, options)
                            // send a query JSON to obtain the url & auth token to upload our media
                        ];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.query(['query', 'mediaConn'])];
                    case 2:
                        json = (_a.sent()).media_conn;
                        auth = json.auth // the auth token
                        ;
                        hostname = 'https://' + json.hosts[0].hostname // first hostname available
                        ;
                        hostname += Constants_1.MediaPathMap[mediaType] + '/' + fileEncSha256B64; // append path
                        hostname += '?auth=' + auth; // add auth token
                        hostname += '&token=' + fileEncSha256B64; // file hash
                        return [4 /*yield*/, node_fetch_1.default(hostname, {
                                method: 'POST',
                                body: body,
                                headers: { Origin: 'https://web.whatsapp.com' },
                            })];
                    case 3:
                        urlFetch = _a.sent();
                        return [4 /*yield*/, urlFetch.json()];
                    case 4:
                        responseJSON = _a.sent();
                        if (!responseJSON.url) {
                            throw 'UPLOAD FAILED GOT: ' + JSON.stringify(responseJSON);
                        }
                        message = {};
                        message[mediaType] = {
                            url: responseJSON.url,
                            mediaKey: mediaKey.toString('base64'),
                            mimetype: options.mimetype,
                            fileEncSha256: fileEncSha256B64,
                            fileSha256: fileSha256.toString('base64'),
                            fileLength: buffer.length,
                            gifPlayback: isGIF || null,
                        };
                        return [2 /*return*/, message];
                }
            });
        });
    };
    /** Generic send message function */
    WhatsAppWebMessages.prototype.sendGenericMessage = function (id, message, options) {
        return __awaiter(this, void 0, void 0, function () {
            var key, timestamp, quoted, participant, messageJSON, json, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!options.timestamp) {
                            // if no timestamp was provided,
                            options.timestamp = new Date(); // set timestamp to now
                        }
                        key = Object.keys(message)[0];
                        timestamp = options.timestamp.getTime() / 1000;
                        quoted = options.quoted;
                        if (quoted) {
                            participant = quoted.key.participant || quoted.key.remoteJid;
                            message[key].contextInfo = {
                                participant: participant,
                                stanzaId: quoted.key.id,
                                quotedMessage: quoted.message,
                            };
                            // if a participant is quoted, then it must be a group
                            // hence, remoteJid of group must also be entered
                            if (quoted.key.participant) {
                                message[key].contextInfo.remoteJid = quoted.key.remoteJid;
                            }
                        }
                        message[key].caption = options === null || options === void 0 ? void 0 : options.caption;
                        message[key].jpegThumbnail = options === null || options === void 0 ? void 0 : options.thumbnail;
                        messageJSON = {
                            key: {
                                remoteJid: id,
                                fromMe: true,
                                id: Utils_1.generateMessageID(),
                            },
                            message: message,
                            messageTimestamp: timestamp,
                            participant: id.includes('@g.us') ? this.userMetaData.id : null,
                        };
                        json = ['action', { epoch: this.msgCount.toString(), type: 'relay' }, [['message', null, messageJSON]]];
                        return [4 /*yield*/, this.queryExpecting200(json, [Constants_2.WAMetric.message, Constants_2.WAFlag.ignore], null, messageJSON.key.id)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, { status: response.status, messageID: messageJSON.key.id }];
                }
            });
        });
    };
    return WhatsAppWebMessages;
}(Base_1.default));
exports.default = WhatsAppWebMessages;
