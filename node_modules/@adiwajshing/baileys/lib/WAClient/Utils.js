"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeMediaMessage = exports.generateThumbnail = exports.getMediaKeys = exports.getNotificationType = exports.validateJIDForSending = void 0;
var Constants_1 = require("./Constants");
var sharp_1 = __importDefault(require("sharp"));
var fs = __importStar(require("fs"));
var node_fetch_1 = __importDefault(require("node-fetch"));
var Utils_1 = require("../WAConnection/Utils");
var crypto_1 = require("crypto");
var child_process_1 = require("child_process");
function validateJIDForSending(jid) {
    var regexp = /^[0-9]{1,20}(-[0-9]{1,20}@g.us|@s.whatsapp.net)$/;
    if (!regexp.test(jid)) {
        throw new Error("Invalid WhatsApp id: " + jid + "\n            1. Please ensure you suffix '@s.whatsapp.net' for individual numbers & '@g.us' for groups\n            2. Please do not put any alphabets or special characters like a '+' in the number. A '-' symbol in groups is fine");
    }
}
exports.validateJIDForSending = validateJIDForSending;
/** Type of notification */
function getNotificationType(message) {
    if (message.message) {
        return ['message', Object.keys(message.message)[0]];
    }
    else if (message.messageStubType) {
        return [Constants_1.WAMessageType[message.messageStubType], null];
    }
    else {
        return ['unknown', null];
    }
}
exports.getNotificationType = getNotificationType;
/** generates all the keys required to encrypt/decrypt & sign a media message */
function getMediaKeys(buffer, mediaType) {
    // expand using HKDF to 112 bytes, also pass in the relevant app info
    var expandedMediaKey = Utils_1.hkdf(buffer, 112, Constants_1.HKDFInfoKeys[mediaType]);
    return {
        iv: expandedMediaKey.slice(0, 16),
        cipherKey: expandedMediaKey.slice(16, 48),
        macKey: expandedMediaKey.slice(48, 80),
    };
}
exports.getMediaKeys = getMediaKeys;
/** Extracts video thumb using FFMPEG */
var extractVideoThumb = function (path, destPath, time, size) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, new Promise(function (resolve, reject) {
                var cmd = "ffmpeg -ss " + time + " -i " + path + " -y -s " + size.width + "x" + size.height + " -vframes 1 -f image2 " + destPath;
                child_process_1.exec(cmd, function (err) {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve();
                    }
                });
            })
            /** generates a thumbnail for a given media, if required */
        ];
    });
}); };
/** generates a thumbnail for a given media, if required */
function generateThumbnail(buffer, mediaType, info) {
    return __awaiter(this, void 0, void 0, function () {
        var buff, filename, imgFilename, buff, err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(info.thumbnail === null || info.thumbnail)) return [3 /*break*/, 1];
                    // don't do anything if the thumbnail is already provided, or is null
                    if (mediaType === Constants_1.MessageType.audio) {
                        throw 'audio messages cannot have thumbnails';
                    }
                    return [3 /*break*/, 8];
                case 1:
                    if (!(mediaType === Constants_1.MessageType.image || mediaType === Constants_1.MessageType.sticker)) return [3 /*break*/, 3];
                    return [4 /*yield*/, sharp_1.default(buffer).resize(48, 48).jpeg().toBuffer()];
                case 2:
                    buff = _a.sent();
                    info.thumbnail = buff.toString('base64');
                    return [3 /*break*/, 8];
                case 3:
                    if (!(mediaType === Constants_1.MessageType.video)) return [3 /*break*/, 8];
                    filename = './' + crypto_1.randomBytes(5).toString('hex') + '.mp4';
                    imgFilename = filename + '.jpg';
                    fs.writeFileSync(filename, buffer);
                    _a.label = 4;
                case 4:
                    _a.trys.push([4, 6, , 7]);
                    return [4 /*yield*/, extractVideoThumb(filename, imgFilename, '00:00:00', { width: 48, height: 48 })];
                case 5:
                    _a.sent();
                    buff = fs.readFileSync(imgFilename);
                    info.thumbnail = buff.toString('base64');
                    fs.unlinkSync(imgFilename);
                    return [3 /*break*/, 7];
                case 6:
                    err_1 = _a.sent();
                    console.log('could not generate video thumb: ' + err_1);
                    return [3 /*break*/, 7];
                case 7:
                    fs.unlinkSync(filename);
                    _a.label = 8;
                case 8: return [2 /*return*/];
            }
        });
    });
}
exports.generateThumbnail = generateThumbnail;
/**
 * Decode a media message (video, image, document, audio) & save it to the given file
 * @param message the media message you want to decode
 * @param filename the name of the file where the media will be saved
 * @param attachExtension should the correct extension be applied automatically to the file
 */
function decodeMediaMessage(message, filename, attachExtension) {
    if (attachExtension === void 0) { attachExtension = true; }
    return __awaiter(this, void 0, void 0, function () {
        var getExtension, type, messageContent, mediaKeys, iv, cipherKey, macKey, fetched, buffer, file, mac, testBuff, sign, decrypted, trueFileName;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    getExtension = function (mimetype) { return mimetype.split(';')[0].split('/')[1]; };
                    type = Object.keys(message)[0];
                    if (!type) {
                        throw 'unknown message type';
                    }
                    if (type === Constants_1.MessageType.text || type === Constants_1.MessageType.extendedText) {
                        throw 'cannot decode text message';
                    }
                    if (type === Constants_1.MessageType.location || type === Constants_1.MessageType.liveLocation) {
                        fs.writeFileSync(filename + '.jpeg', message[type].jpegThumbnail);
                        return [2 /*return*/, { filename: filename + '.jpeg' }];
                    }
                    messageContent = message[type];
                    mediaKeys = getMediaKeys(messageContent.mediaKey, type) //getMediaKeys(Buffer.from(messageContent.mediaKey, 'base64'), type)
                    ;
                    iv = mediaKeys.iv;
                    cipherKey = mediaKeys.cipherKey;
                    macKey = mediaKeys.macKey;
                    return [4 /*yield*/, node_fetch_1.default(messageContent.url, {})];
                case 1:
                    fetched = _a.sent();
                    return [4 /*yield*/, fetched.buffer()
                        // first part is actual file
                    ];
                case 2:
                    buffer = _a.sent();
                    file = buffer.slice(0, buffer.length - 10);
                    mac = buffer.slice(buffer.length - 10, buffer.length);
                    testBuff = Buffer.concat([iv, file]);
                    sign = Utils_1.hmacSign(testBuff, macKey).slice(0, 10);
                    // our sign should equal the mac
                    if (sign.equals(mac)) {
                        decrypted = Utils_1.aesDecryptWithIV(file, cipherKey, iv) // decrypt media
                        ;
                        trueFileName = attachExtension ? (filename + '.' + getExtension(messageContent.mimetype)) : filename;
                        fs.writeFileSync(trueFileName, decrypted);
                        return [2 /*return*/, trueFileName];
                    }
                    else {
                        throw 'HMAC sign does not match';
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.decodeMediaMessage = decodeMediaMessage;
