"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Curve = __importStar(require("curve25519-js"));
var Utils = __importStar(require("./Utils"));
var Base_1 = __importDefault(require("./Base"));
var WAConnectionValidator = /** @class */ (function (_super) {
    __extends(WAConnectionValidator, _super);
    function WAConnectionValidator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /** Authenticate the connection */
    WAConnectionValidator.prototype.authenticate = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            var _this = this;
            return __generator(this, function (_a) {
                if (!this.authInfo.clientID) {
                    // if no auth info is present, that is, a new session has to be established
                    // generate a client ID
                    this.authInfo = {
                        clientID: Utils.generateClientID(),
                        clientToken: null,
                        serverToken: null,
                        encKey: null,
                        macKey: null,
                    };
                }
                data = ['admin', 'init', this.version, this.browserDescription, this.authInfo.clientID, true];
                return [2 /*return*/, this.query(data)
                        .then(function (json) {
                        // we're trying to establish a new connection or are trying to log in
                        switch (json.status) {
                            case 200: // all good and we can procede to generate a QR code for new connection, or can now login given present auth info
                                if (_this.authInfo.encKey && _this.authInfo.macKey) {
                                    // if we have the info to restore a closed session
                                    var data_1 = [
                                        'admin',
                                        'login',
                                        _this.authInfo.clientToken,
                                        _this.authInfo.serverToken,
                                        _this.authInfo.clientID,
                                        'takeover',
                                    ];
                                    return _this.query(data_1, null, null, 's1'); // wait for response with tag "s1"
                                }
                                else {
                                    return _this.generateKeysForAuth(json.ref);
                                }
                            default:
                                throw [json.status, 'unknown error', json];
                        }
                    })
                        .then(function (json) {
                        switch (json.status) {
                            case 401: // if the phone was unpaired
                                throw [json.status, 'unpaired from phone', json];
                            case 429: // request to login was denied, don't know why it happens
                                throw [json.status, 'request denied, try reconnecting', json];
                            case 304: // request to generate a new key for a QR code was denied
                                throw [json.status, 'request for new key denied', json];
                            default:
                                break;
                        }
                        if (json[1] && json[1].challenge) {
                            // if its a challenge request (we get it when logging in)
                            return _this.respondToChallenge(json[1].challenge).then(function (json) {
                                if (json.status !== 200) {
                                    // throw an error if the challenge failed
                                    throw [json.status, 'unknown error', json];
                                }
                                return _this.waitForMessage('s2', []); // otherwise wait for the validation message
                            });
                        }
                        else {
                            // otherwise just chain the promise further
                            return json;
                        }
                    })
                        .then(function (json) {
                        _this.validateNewConnection(json[1]); // validate the connection
                        _this.log('validated connection successfully');
                        _this.lastSeen = new Date(); // set last seen to right now
                        return _this.userMetaData;
                    })];
            });
        });
    };
    /**
     * Once the QR code is scanned and we can validate our connection, or we resolved the challenge when logging back in
     * @private
     * @param {object} json
     */
    WAConnectionValidator.prototype.validateNewConnection = function (json) {
        var _this = this;
        var onValidationSuccess = function () {
            // set metadata: one's WhatsApp ID [cc][number]@s.whatsapp.net, name on WhatsApp, info about the phone
            _this.userMetaData = {
                id: json.wid.replace('@c.us', '@s.whatsapp.net'),
                name: json.pushname,
                phone: json.phone,
            };
            return _this.userMetaData;
        };
        if (json.connected) {
            // only if we're connected
            if (!json.secret) {
                // if we didn't get a secret, we don't need it, we're validated
                return onValidationSuccess();
            }
            var secret = Buffer.from(json.secret, 'base64');
            if (secret.length !== 144) {
                throw [4, 'incorrect secret length: ' + secret.length];
            }
            // generate shared key from our private key & the secret shared by the server
            var sharedKey = Curve.sharedKey(this.curveKeys.private, secret.slice(0, 32));
            // expand the key to 80 bytes using HKDF
            var expandedKey = Utils.hkdf(sharedKey, 80);
            // perform HMAC validation.
            var hmacValidationKey = expandedKey.slice(32, 64);
            var hmacValidationMessage = Buffer.concat([secret.slice(0, 32), secret.slice(64, secret.length)]);
            var hmac = Utils.hmacSign(hmacValidationMessage, hmacValidationKey);
            if (hmac.equals(secret.slice(32, 64))) {
                // computed HMAC should equal secret[32:64]
                // expandedKey[64:] + secret[64:] are the keys, encrypted using AES, that are used to encrypt/decrypt the messages recieved from WhatsApp
                // they are encrypted using key: expandedKey[0:32]
                var encryptedAESKeys = Buffer.concat([
                    expandedKey.slice(64, expandedKey.length),
                    secret.slice(64, secret.length),
                ]);
                var decryptedKeys = Utils.aesDecrypt(encryptedAESKeys, expandedKey.slice(0, 32));
                // set the credentials
                this.authInfo = {
                    encKey: decryptedKeys.slice(0, 32),
                    macKey: decryptedKeys.slice(32, 64),
                    clientToken: json.clientToken,
                    serverToken: json.serverToken,
                    clientID: this.authInfo.clientID,
                };
                return onValidationSuccess();
            }
            else {
                // if the checksums didn't match
                throw [5, 'HMAC validation failed'];
            }
        }
        else {
            // if we didn't get the connected field (usually we get this message when one opens WhatsApp on their phone)
            throw [6, 'json connection failed', json];
        }
    };
    /**
     * When logging back in (restoring a previously closed session), WhatsApp may challenge one to check if one still has the encryption keys
     * WhatsApp does that by asking for us to sign a string it sends with our macKey
     */
    WAConnectionValidator.prototype.respondToChallenge = function (challenge) {
        var bytes = Buffer.from(challenge, 'base64'); // decode the base64 encoded challenge string
        var signed = Utils.hmacSign(bytes, this.authInfo.macKey).toString('base64'); // sign the challenge string with our macKey
        var data = ['admin', 'challenge', signed, this.authInfo.serverToken, this.authInfo.clientID]; // prepare to send this signed string with the serverToken & clientID
        this.log('resolving login challenge');
        return this.query(data);
    };
    /**
     * When starting a new session, generate a QR code by generating a private/public key pair & the keys the server sends
     * @private
     */
    WAConnectionValidator.prototype.generateKeysForAuth = function (ref) {
        this.curveKeys = Curve.generateKeyPair(Utils.randomBytes(32));
        this.onReadyForPhoneAuthentication([
            ref,
            Buffer.from(this.curveKeys.public).toString('base64'),
            this.authInfo.clientID,
        ]);
        return this.waitForMessage('s1', []);
    };
    return WAConnectionValidator;
}(Base_1.default));
exports.default = WAConnectionValidator;
