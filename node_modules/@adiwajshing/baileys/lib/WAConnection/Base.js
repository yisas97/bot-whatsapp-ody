"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var QR = __importStar(require("qrcode-terminal"));
var fs = __importStar(require("fs"));
var Utils = __importStar(require("./Utils"));
var Encoder_1 = __importDefault(require("../Binary/Encoder"));
var Decoder_1 = __importDefault(require("../Binary/Decoder"));
var Constants_1 = require("./Constants");
/** Generate a QR code from the ref & the curve public key. This is scanned by the phone */
var generateQRCode = function (_a) {
    var ref = _a[0], publicKey = _a[1], clientID = _a[2];
    var str = ref + ',' + publicKey + ',' + clientID;
    QR.generate(str, { small: true });
};
var WAConnectionBase = /** @class */ (function () {
    function WAConnectionBase() {
        var _this = this;
        /** The version of WhatsApp Web we're telling the servers we are */
        this.version = [2, 2025, 6];
        /** The Browser we're telling the WhatsApp Web servers we are */
        this.browserDescription = ['Baileys', 'Baileys'];
        /** Metadata like WhatsApp id, name set on WhatsApp etc. */
        this.userMetaData = { id: null, name: null, phone: null };
        /** Should reconnect automatically after an unexpected disconnect */
        this.autoReconnect = true;
        this.lastSeen = null;
        /** Log messages that are not handled, so you can debug & see what custom stuff you can implement */
        this.logLevel = Constants_1.MessageLogLevel.none;
        /** Data structure of tokens & IDs used to establish one's identiy to WhatsApp Web */
        this.authInfo = {
            clientID: null,
            serverToken: null,
            clientToken: null,
            encKey: null,
            macKey: null,
        };
        /** The websocket connection */
        this.conn = null;
        this.msgCount = 0;
        this.callbacks = {};
        this.encoder = new Encoder_1.default();
        this.decoder = new Decoder_1.default();
        /**
         * What to do when you need the phone to authenticate the connection (generate QR code by default)
         */
        this.onReadyForPhoneAuthentication = generateQRCode;
        this.unexpectedDisconnect = function (err) { return _this.close(); };
    }
    /**
     * base 64 encode the authentication credentials and return them
     * these can then be used to login again by passing the object to the connect () function.
     * @see connect () in WhatsAppWeb.Session
     */
    WAConnectionBase.prototype.base64EncodedAuthInfo = function () {
        return {
            clientID: this.authInfo.clientID,
            serverToken: this.authInfo.serverToken,
            clientToken: this.authInfo.clientToken,
            encKey: this.authInfo.encKey.toString('base64'),
            macKey: this.authInfo.macKey.toString('base64'),
        };
    };
    /**
     * Load in the authentication credentials
     * @param authInfo the authentication credentials or path to auth credentials JSON
     */
    WAConnectionBase.prototype.loadAuthInfoFromBase64 = function (authInfo) {
        if (!authInfo) {
            throw 'given authInfo is null';
        }
        if (typeof authInfo === 'string') {
            this.log("loading authentication credentials from " + authInfo);
            var file = fs.readFileSync(authInfo, { encoding: 'utf-8' }); // load a closed session back if it exists
            authInfo = JSON.parse(file);
        }
        this.authInfo = {
            clientID: authInfo.clientID,
            serverToken: authInfo.serverToken,
            clientToken: authInfo.clientToken,
            encKey: Buffer.from(authInfo.encKey, 'base64'),
            macKey: Buffer.from(authInfo.macKey, 'base64'),
        };
    };
    /**
     * Register for a callback for a certain function, will cancel automatically after one execution
     * @param {[string, object, string] | string} parameters name of the function along with some optional specific parameters
     */
    WAConnectionBase.prototype.registerCallbackOneTime = function (parameters) {
        return __awaiter(this, void 0, void 0, function () {
            var json;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, new Promise(function (resolve, _) { return _this.registerCallback(parameters, resolve); })];
                    case 1:
                        json = _a.sent();
                        this.deregisterCallback(parameters);
                        return [2 /*return*/, json];
                }
            });
        });
    };
    /**
     * Register for a callback for a certain function
     * @param parameters name of the function along with some optional specific parameters
     */
    WAConnectionBase.prototype.registerCallback = function (parameters, callback) {
        if (typeof parameters === 'string') {
            return this.registerCallback([parameters, null, null], callback);
        }
        if (!Array.isArray(parameters)) {
            throw 'parameters (' + parameters + ') must be a string or array';
        }
        var func = 'function:' + parameters[0];
        var key = parameters[1] || '';
        var key2 = parameters[2] || '';
        if (!this.callbacks[func]) {
            this.callbacks[func] = {};
        }
        if (!this.callbacks[func][key]) {
            this.callbacks[func][key] = {};
        }
        this.callbacks[func][key][key2] = callback;
    };
    /**
     * Cancel all further callback events associated with the given parameters
     * @param parameters name of the function along with some optional specific parameters
     */
    WAConnectionBase.prototype.deregisterCallback = function (parameters) {
        if (typeof parameters === 'string') {
            return this.deregisterCallback([parameters]);
        }
        if (!Array.isArray(parameters)) {
            throw 'parameters (' + parameters + ') must be a string or array';
        }
        var func = 'function:' + parameters[0];
        var key = parameters[1] || '';
        var key2 = parameters[2] || '';
        if (this.callbacks[func] && this.callbacks[func][key] && this.callbacks[func][key][key2]) {
            delete this.callbacks[func][key][key2];
            return;
        }
        this.log('WARNING: could not find ' + JSON.stringify(parameters) + ' to deregister');
    };
    /**
     * Wait for a message with a certain tag to be received
     * @param tag the message tag to await
     * @param json query that was sent
     * @param timeoutMs timeout after which the promise will reject
     */
    WAConnectionBase.prototype.waitForMessage = function (tag, json, timeoutMs) {
        if (json === void 0) { json = null; }
        if (timeoutMs === void 0) { timeoutMs = null; }
        return __awaiter(this, void 0, void 0, function () {
            var promise;
            var _this = this;
            return __generator(this, function (_a) {
                promise = new Promise(function (resolve, reject) { return (_this.callbacks[tag] = { queryJSON: json, callback: resolve, errCallback: reject }); });
                if (timeoutMs) {
                    promise = Utils.promiseTimeout(timeoutMs, promise).catch(function (err) {
                        delete _this.callbacks[tag];
                        throw err;
                    });
                }
                return [2 /*return*/, promise];
            });
        });
    };
    /**
     * Query something from the WhatsApp servers and error on a non-200 status
     * @param json the query itself
     * @param [binaryTags] the tags to attach if the query is supposed to be sent encoded in binary
     * @param [timeoutMs] timeout after which the query will be failed (set to null to disable a timeout)
     * @param [tag] the tag to attach to the message
     * recieved JSON
     */
    WAConnectionBase.prototype.queryExpecting200 = function (json, binaryTags, timeoutMs, tag) {
        if (binaryTags === void 0) { binaryTags = null; }
        if (timeoutMs === void 0) { timeoutMs = null; }
        if (tag === void 0) { tag = null; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, Utils.errorOnNon200Status(this.query(json, binaryTags, timeoutMs, tag))];
            });
        });
    };
    /**
     * Query something from the WhatsApp servers
     * @param json the query itself
     * @param [binaryTags] the tags to attach if the query is supposed to be sent encoded in binary
     * @param [timeoutMs] timeout after which the query will be failed (set to null to disable a timeout)
     * @param [tag] the tag to attach to the message
     * recieved JSON
     */
    WAConnectionBase.prototype.query = function (json, binaryTags, timeoutMs, tag) {
        if (binaryTags === void 0) { binaryTags = null; }
        if (timeoutMs === void 0) { timeoutMs = null; }
        if (tag === void 0) { tag = null; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (binaryTags) {
                    tag = this.sendBinary(json, binaryTags, tag);
                }
                else {
                    tag = this.sendJSON(json, tag);
                }
                return [2 /*return*/, this.waitForMessage(tag, json, timeoutMs)];
            });
        });
    };
    /**
     * Send a binary encoded message
     * @param json the message to encode & send
     * @param {[number, number]} tags the binary tags to tell WhatsApp what the message is all about
     * @param {string} [tag] the tag to attach to the message
     * @return {string} the message tag
     */
    WAConnectionBase.prototype.sendBinary = function (json, tags, tag) {
        var binary = this.encoder.write(json); // encode the JSON to the WhatsApp binary format
        var buff = Utils.aesEncrypt(binary, this.authInfo.encKey); // encrypt it using AES and our encKey
        var sign = Utils.hmacSign(buff, this.authInfo.macKey); // sign the message using HMAC and our macKey
        tag = tag || Utils.generateMessageTag();
        buff = Buffer.concat([
            Buffer.from(tag + ','),
            Buffer.from(tags),
            sign,
            buff,
        ]);
        this.send(buff); // send it off
        return tag;
    };
    /**
     * Send a plain JSON message to the WhatsApp servers
     * @private
     * @param json the message to send
     * @param [tag] the tag to attach to the message
     * @return the message tag
     */
    WAConnectionBase.prototype.sendJSON = function (json, tag) {
        if (tag === void 0) { tag = null; }
        tag = tag || Utils.generateMessageTag();
        this.send(tag + ',' + JSON.stringify(json));
        return tag;
    };
    /** Send some message to the WhatsApp servers */
    WAConnectionBase.prototype.send = function (m) {
        if (!this.conn) {
            throw 'cannot send message, disconnected from WhatsApp';
        }
        this.msgCount += 1; // increment message count, it makes the 'epoch' field when sending binary messages
        this.conn.send(m);
    };
    /**
     * Disconnect from the phone. Your auth credentials become invalid after sending a disconnect request.
     * @see close() if you just want to close the connection
     */
    WAConnectionBase.prototype.logout = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.conn) {
                            throw "You're not even connected, you can't log out";
                        }
                        return [4 /*yield*/, new Promise(function (resolve) {
                                _this.conn.send('goodbye,["admin","Conn","disconnect"]', null, function () {
                                    _this.authInfo = null;
                                    resolve();
                                });
                            })];
                    case 1:
                        _a.sent();
                        this.close();
                        return [2 /*return*/];
                }
            });
        });
    };
    /** Close the connection to WhatsApp Web */
    WAConnectionBase.prototype.close = function () {
        var _this = this;
        this.msgCount = 0;
        if (this.conn) {
            this.conn.close();
            this.conn = null;
        }
        var keys = Object.keys(this.callbacks);
        keys.forEach(function (key) {
            if (!key.includes('function:')) {
                _this.callbacks[key].errCallback('connection closed');
                delete _this.callbacks[key];
            }
        });
        if (this.keepAliveReq) {
            clearInterval(this.keepAliveReq);
        }
    };
    WAConnectionBase.prototype.log = function (text) {
        console.log("[Baileys][" + new Date().toLocaleString() + "] " + text);
    };
    return WAConnectionBase;
}());
exports.default = WAConnectionBase;
