import { AuthenticationCredentialsBase64, UserMetaData, WAChat, WAContact } from './Constants';
import WAConnectionValidator from './Validation';
export default class WAConnectionConnector extends WAConnectionValidator {
    /**
     * Connect to WhatsAppWeb
     * @param [authInfo] credentials or path to credentials to log back in
     * @param [timeoutMs] timeout after which the connect will fail, set to null for an infinite timeout
     * @return returns [userMetaData, chats, contacts, unreadMessages]
     */
    connect(authInfo?: AuthenticationCredentialsBase64 | string, timeoutMs?: number): Promise<[UserMetaData, WAChat[], WAContact[], import("../../WAMessage/WAMessage").proto.WebMessageInfo[]]>;
    /**
     * Connect to WhatsAppWeb, resolves without waiting for chats & contacts
     * @param [authInfo] credentials to log back in
     * @param [timeoutMs] timeout after which the connect will fail, set to null for an infinite timeout
     * @return [userMetaData, chats, contacts, unreadMessages]
     */
    connectSlim(authInfo?: AuthenticationCredentialsBase64 | string, timeoutMs?: number): Promise<UserMetaData>;
    /**
     * Sets up callbacks to receive chats, contacts & unread messages.
     * Must be called immediately after connect
     * @returns [chats, contacts, unreadMessages]
     */
    receiveChatsAndContacts(timeoutMs?: number): Promise<[WAChat[], WAContact[], import("../../WAMessage/WAMessage").proto.WebMessageInfo[]]>;
    private onMessageRecieved;
    /** Send a keep alive request every X seconds, server updates & responds with last seen */
    private startKeepAliveRequest;
}
