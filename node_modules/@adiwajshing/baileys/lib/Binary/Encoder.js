"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Constants_1 = require("./Constants");
var Encoder = /** @class */ (function () {
    function Encoder() {
        this.data = [];
    }
    Encoder.prototype.pushByte = function (value) {
        this.data.push(value & 0xff);
    };
    Encoder.prototype.pushInt = function (value, n, littleEndian) {
        if (littleEndian === void 0) { littleEndian = false; }
        for (var i = 0; i < n; i++) {
            var curShift = littleEndian ? i : n - 1 - i;
            this.data.push((value >> (curShift * 8)) & 0xff);
        }
    };
    Encoder.prototype.pushInt20 = function (value) {
        this.pushBytes([(value >> 16) & 0x0f, (value >> 8) & 0xff, value & 0xff]);
    };
    Encoder.prototype.pushBytes = function (bytes) {
        this.data.push.apply(this.data, bytes);
    };
    Encoder.prototype.pushString = function (str) {
        var bytes = new TextEncoder().encode(str);
        this.pushBytes(bytes);
    };
    Encoder.prototype.writeByteLength = function (length) {
        if (length >= 4294967296) {
            throw 'string too large to encode: ' + length;
        }
        if (length >= 1 << 20) {
            this.pushByte(Constants_1.WA.Tags.BINARY_32);
            this.pushInt(length, 4); // 32 bit integer
        }
        else if (length >= 256) {
            this.pushByte(Constants_1.WA.Tags.BINARY_20);
            this.pushInt20(length);
        }
        else {
            this.pushByte(Constants_1.WA.Tags.BINARY_8);
            this.pushByte(length);
        }
    };
    Encoder.prototype.writeStringRaw = function (string) {
        this.writeByteLength(string.length);
        this.pushString(string);
    };
    Encoder.prototype.writeJid = function (left, right) {
        this.pushByte(Constants_1.WA.Tags.JID_PAIR);
        left && left.length > 0 ? this.writeString(left) : this.writeToken(Constants_1.WA.Tags.LIST_EMPTY);
        this.writeString(right);
    };
    Encoder.prototype.writeToken = function (token) {
        if (token < 245) {
            this.pushByte(token);
        }
        else if (token <= 500) {
            throw 'invalid token';
        }
    };
    Encoder.prototype.writeString = function (token, i) {
        if (i === void 0) { i = null; }
        if (token === 'c.us') {
            token = 's.whatsapp.net';
        }
        var tokenIndex = Constants_1.WA.SingleByteTokens.indexOf(token);
        if (!i && token === 's.whatsapp.net') {
            this.writeToken(tokenIndex);
        }
        else if (tokenIndex >= 0) {
            if (tokenIndex < Constants_1.WA.Tags.SINGLE_BYTE_MAX) {
                this.writeToken(tokenIndex);
            }
            else {
                var overflow = tokenIndex - Constants_1.WA.Tags.SINGLE_BYTE_MAX;
                var dictionaryIndex = overflow >> 8;
                if (dictionaryIndex < 0 || dictionaryIndex > 3) {
                    throw 'double byte dict token out of range: ' + token + ', ' + tokenIndex;
                }
                this.writeToken(Constants_1.WA.Tags.DICTIONARY_0 + dictionaryIndex);
                this.writeToken(overflow % 256);
            }
        }
        else if (token) {
            var jidSepIndex = token.indexOf('@');
            if (jidSepIndex <= 0) {
                this.writeStringRaw(token);
            }
            else {
                this.writeJid(token.slice(0, jidSepIndex), token.slice(jidSepIndex + 1, token.length));
            }
        }
    };
    Encoder.prototype.writeAttributes = function (attrs, keys) {
        var _this = this;
        if (!attrs) {
            return;
        }
        keys.forEach(function (key) {
            _this.writeString(key);
            _this.writeString(attrs[key]);
        });
    };
    Encoder.prototype.writeListStart = function (listSize) {
        if (listSize === 0) {
            this.pushByte(Constants_1.WA.Tags.LIST_EMPTY);
        }
        else if (listSize < 256) {
            this.pushBytes([Constants_1.WA.Tags.LIST_8, listSize]);
        }
        else {
            this.pushBytes([Constants_1.WA.Tags.LIST_16, listSize]);
        }
    };
    Encoder.prototype.writeChildren = function (children) {
        var _this = this;
        if (!children) {
            return;
        }
        if (typeof children === 'string') {
            this.writeString(children, true);
        }
        else if (Array.isArray(children)) {
            this.writeListStart(children.length);
            children.forEach(function (c) {
                if (c)
                    _this.writeNode(c);
            });
        }
        else if (typeof children === 'object') {
            var buffer = Constants_1.WA.Message.encode(children).finish();
            this.writeByteLength(buffer.length);
            this.pushBytes(buffer);
        }
        else {
            throw 'invalid children: ' + children + ' (' + typeof children + ')';
        }
    };
    Encoder.prototype.getValidKeys = function (obj) {
        return obj ? Object.keys(obj).filter(function (key) { return obj[key] !== null && obj[key] !== undefined; }) : [];
    };
    Encoder.prototype.writeNode = function (node) {
        if (!node) {
            return;
        }
        else if (node.length !== 3) {
            throw 'invalid node given: ' + node;
        }
        var validAttributes = this.getValidKeys(node[1]);
        this.writeListStart(2 * validAttributes.length + 1 + (node[2] ? 1 : 0));
        this.writeString(node[0]);
        this.writeAttributes(node[1], validAttributes);
        this.writeChildren(node[2]);
    };
    Encoder.prototype.write = function (data) {
        this.data = [];
        this.writeNode(data);
        return Buffer.from(this.data);
    };
    return Encoder;
}());
exports.default = Encoder;
